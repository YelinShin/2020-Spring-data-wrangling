knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(dplyr)
library(tidyverse)
library(tidytext)
library(gutenbergr)
library(wordcloud)
library(stringr)
library(broom)
library(readxl)
library(rvest)
library(lubridate)
library(scales)
library(choroplethr)
library(gridExtra)
library(choroplethrMaps)
library(plotly)
library(knitr)
library(kableExtra)
library(ggpubr)
library(base)
# find 2019 popluation data
Wpopulation2019.raw <- "https://en.wikipedia.org/wiki/List_of_countries_by_population_(United_Nations)"  %>% read_html() %>% html_table(fill=TRUE) %>% .[[4]]
Wpopulation2019 <-  Wpopulation2019.raw %>% separate('Country or area', c("country", "erase"), sep = "\\[") %>% select(-erase,-'UN statisticalregion[4]',-'Population(1 July 2018)',-Change)
names(Wpopulation2019)[names(Wpopulation2019) == "UN continentalregion[4]"] <- "continent"
names(Wpopulation2019)[names(Wpopulation2019) == "Population(1 July 2019)"] <- "population"
Wpopulation2019$country <- tolower(Wpopulation2019$country)
Wpopulation2019$population <- as.numeric(gsub(",","",Wpopulation2019$population))
data(country.regions)
names(Wpopulation2019)[names(Wpopulation2019) == "country"] <- "region"
matched = inner_join(country.regions["region"], Wpopulation2019["region"], by ="region")
rename = setdiff(country.regions$region,matched$region)
# rename
#antartica, kosovo is not exist in Wpopulation2019
Wpopulation2019$region[Wpopulation2019$region == "north macedonia"] <- "macedonia"
Wpopulation2019$region[Wpopulation2019$region == "united states"] <- "united states of america"
Wpopulation2019$region[Wpopulation2019$region == "somaliland"] <- "somalia"
Wpopulation2019$region[Wpopulation2019$region == "serbia"] <- "republic of serbia"
Wpopulation2019$region[Wpopulation2019$region == "tanzania"] <- "united republic of tanzania"
Wpopulation2019$region[Wpopulation2019$region == "bahamas"] <- "the bahamas"
Wpopulation2019$region[Wpopulation2019$region == "dr congo"] <- "democratic republic of the congo"
Wpopulation2019$region[Wpopulation2019$region == "congo"] <- "republic of congo"
Wpopulation2019$region[Wpopulation2019$region == "cyprus"] <- "northern cyprus"
Wpopulation2019$region[Wpopulation2019$region == "guinea-bissau"] <- "guinea bissau"
Wpopulation2019$region[Wpopulation2019$region == "eswatini"] <- "swaziland"
# worldwide timeseries
Wtime_covid.raw = read_csv("https://raw.githubusercontent.com/datasets/covid-19/master/data/time-series-19-covid-combined.csv")
# worldwide testing case timeseries
Wtime_testing.raw = read_csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/testing/covid-testing-all-observations.csv")
Wtime_covid = Wtime_covid.raw
Wtime_testing = Wtime_testing.raw
names(Wtime_testing)[names(Wtime_testing) == "Cumulative total"] <- "cumulative_test"
names(Wtime_testing)[names(Wtime_testing) == "Source URL"] <- "source"
names(Wtime_covid)[names(Wtime_covid) == "Country/Region"] <- "region"
Wtime_covid$region <- tolower(Wtime_covid$region)
time_country= unique(Wtime_covid$region)
df <- data.frame(matrix(unlist(time_country), nrow=length(time_country), byrow=T))
matched2 = inner_join(country.regions["region"], Wtime_covid["region"], by ="region")
rename2 = setdiff(country.regions$region,matched2$region)
#rename2
#north korea, solomon islands, somaliland, turkmenistan, vanuatu, ivory coast, northern cyprus, antarctica, lesotho
Wtime_covid$region[Wtime_covid$region == "north macedonia"] <- "macedonia"
Wtime_covid$region[Wtime_covid$region == "burma"] <- "myanmar"
Wtime_covid$region[Wtime_covid$region == "us"] <- "united states of america"
Wtime_covid$region[Wtime_covid$region == "serbia"] <- "republic of serbia"
Wtime_covid$region[Wtime_covid$region == "eswatini"] <- "swaziland"
Wtime_covid$region[Wtime_covid$region == "timor-leste"] <- "east timor"
Wtime_covid$region[Wtime_covid$region == "taiwan*"] <- "taiwan"
Wtime_covid$region[Wtime_covid$region == "tanzania"] <- "united republic of tanzania"
Wtime_covid$region[Wtime_covid$region == "bahamas"] <- "the bahamas"
Wtime_covid$region[Wtime_covid$region == "congo (kinshasa)"] <- "democratic republic of the congo"
Wtime_covid$region[Wtime_covid$region == "congo (brazzaville)"] <- "republic of congo"
Wtime_covid$region[Wtime_covid$region == "czechia"] <- "czech republic"
Wtime_covid$region[Wtime_covid$region == "guinea-bissau"] <- "guinea bissau"
Wtime_covid$region[Wtime_covid$region == "korea, south"] <- "south korea"
#summarize the number of the province/state in each country
Wtime_covid = Wtime_covid %>%
group_by(region,Date) %>%
summarise(confirmed = sum(Confirmed,na.rm=TRUE), recovered = sum(Recovered,na.rm=TRUE), deaths = sum(Deaths,na.rm=TRUE)) %>%
mutate(actives = confirmed - recovered- deaths)
#getting latest update from each country's testing number
Wtime_testing <-  Wtime_testing %>%
separate('Entity', c("region", "erase"), sep = " - ") %>%
select(region,Date,erase,cumulative_test)
select.one.resource=Wtime_testing %>%
group_by(region) %>%
summarize(erase =max(erase))
Wtime_testing = inner_join(Wtime_testing, select.one.resource, by= c("region","erase")) # some country contains 2 sources for testing, so only grab one
Wtime_testing$region <- tolower(Wtime_testing$region)
testing= unique(Wtime_testing$region)
df <- data.frame(matrix(unlist(testing), nrow=length(testing), byrow=T))
matched2 = inner_join(Wtime_covid["region"], Wtime_testing["region"], by ="region")
rename3 = setdiff(Wtime_testing$region,matched2$region)
#rename3
#hongkong, serbia is missing in Wtime_testing
Wtime_testing$region[Wtime_testing$region == "united states"] <- "united states of america"
wtime_covid_final = left_join(Wtime_covid,Wpopulation2019, by='region') %>%
select("Date","region","region","confirmed","recovered","deaths","actives","population")
wtime_covid_final = left_join(wtime_covid_final,Wtime_testing, by =c('region', 'Date')) %>%
select("Date","region","region","confirmed","recovered","deaths","actives","cumulative_test","population")
write.csv(wtime_covid_final,"word_covid19_timeseries.csv")
latest.testing = wtime_covid_final %>%
filter(!is.na(cumulative_test)) %>%
group_by(region) %>%
filter(Date == max(Date) ) %>%
select(region, cumulative_test)
w_latest_covid = wtime_covid_final %>%
group_by(region) %>%
filter(Date == max(Date) ) %>%
mutate(actives = confirmed - recovered - deaths) %>%
arrange(desc(actives))
latest_test = Wtime_testing %>%
group_by(region) %>%
filter(Date <= max(w_latest_covid$Date)) %>% #since sometime testing update faster than worldwide timeseries
filter(Date == max(Date))
final.w_latest_covid = left_join(w_latest_covid, latest_test, by = "region") %>%
mutate(cumulative_test= cumulative_test.y) %>%
select(- c("Date.y","cumulative_test.x","cumulative_test.y","erase"))
names(final.w_latest_covid)[1] <- "Date"
write.csv(final.w_latest_covid,"word_covid19_latest.csv")
# find top 30 world rank by GDP
GDP.ranking.raw <- "https://en.wikipedia.org/wiki/List_of_countries_by_GDP_(nominal)"  %>% read_html() %>% html_table(fill=TRUE) %>% .[[6]]
GDP.ranking <-  GDP.ranking.raw %>%
separate('Country/Territory', c("region", "erase"), sep = "\\[") %>%
select(-erase,-'GDP(US$million)') %>% filter(!is.na(as.numeric(Rank))) %>%
mutate(rank = as.integer(Rank))%>%
select(-Rank)%>%
arrange(rank)
GDP.ranking$region<- tolower(GDP.ranking$region)
matched2 = inner_join(wtime_covid_final["region"], GDP.ranking["region"], by ="region")
rename3 = setdiff(GDP.ranking$region,wtime_covid_final$region)
#rename3
GDP.ranking$region[GDP.ranking$region == "united states"] <- "united states of america"
GDP.ranking$region[GDP.ranking$region == "korea, south"] <- "south korea"
GDP.ranking$region[GDP.ranking$region == "tanzania" ]<-"united republic of tanzania"
GDP.ranking$region[GDP.ranking$region == "serbia" ]<-"republic of serbia"
GDP.ranking$region[GDP.ranking$region == "eswatini" ]<-"swaziland"
GDP.ranking$region[GDP.ranking$region == "guinea-bissau"] <- "guinea bissau"
GDP.ranking$region[GDP.ranking$region == "north macedonia"] <- "macedonia"
GDP.ranking$region[GDP.ranking$region == "congo, democratic republic of the"] <- "the bahamas"
GDP.ranking$region[GDP.ranking$region == "bahamas, the"] <- "the bahamas"
GDP.ranking$region[GDP.ranking$region == "congo, republic of the"] <- "democratic republic of the congo"
kable(Wtime_covid.raw[sample(nrow(Wtime_covid.raw), 2), ],"markdown") %>% kable_styling(font_size = 7) %>%
add_footnote("Random 2 rows in world time-series covid 19", notation="alphabet")
kable(Wtime_testing.raw[sample(nrow(Wtime_testing.raw), 2), ],"markdown") %>% kable_styling(font_size = 6) %>%
add_footnote("Random 2 rows in world time-series testing update", notation="alphabet")
kable(Wpopulation2019.raw[sample(nrow(Wpopulation2019.raw), 2), ],"markdown") %>% kable_styling(font_size = 7) %>%
add_footnote("Random 2 rows in world 2019 population", notation="alphabet")
kable(GDP.ranking.raw[sample(nrow(GDP.ranking.raw), 2), ],"markdown")%>% kable_styling() %>%
add_footnote("Random 2 rows in GDP Ranking", notation="alphabet")
a = wtime_covid_final %>%
filter(!is.na(cumulative_test))
kable(a[sample(nrow(a), 5), ],"markdown")%>% kable_styling() %>%
add_footnote("Random 5 row in time-series covid 19 table", notation="alphabet")
a = final.w_latest_covid %>%
filter(!is.na(cumulative_test))
kable(a[sample(nrow(a), 5), ], "markdown")%>% kable_styling() %>%
add_footnote("Random 5 row in most recent covid 19 table", notation="alphabet")
kable(head(GDP.ranking,10),"markdown")%>%
add_footnote("World ranking top 10 by GDP", notation="alphabet")
most.update = final.w_latest_covid %>%
mutate(all= "all") %>%
group_by(all)%>%
summarize(update_date = max(Date),confirmed= sum(confirmed), recovered = sum(recovered), deaths = sum(deaths), actives = sum(actives)) %>%
select(-all)
kable(most.update,"markdown")
world.case.timeline=wtime_covid_final %>%
group_by(Date) %>%
summarize(confirmed= sum(confirmed), recovered = sum(recovered), deaths = sum(deaths), actives = sum(actives))
world.case.timeline=world.case.timeline %>% gather(c("confirmed", "recovered", "deaths", "actives"), key="type", value="number") %>%
arrange(Date)
ggplot(world.case.timeline,aes(x=Date, y=number, color=type)) + geom_line() + labs("Timeline by number of cases in the world")
kable(final.w_latest_covid %>%
arrange(desc(actives)) %>%
mutate(ratio_active = actives/population * 100) %>%
select(region, actives, ratio_active, population) %>%
head(3), "markdown")
kable(final.w_latest_covid %>%
mutate(ratio_active = actives/population * 100) %>%
arrange(desc(ratio_active)) %>%
select(region, actives, ratio_active, population) %>%
head(3),"markdown")
#active number / population
w_latest_covid.actives <- final.w_latest_covid %>%
select(region, actives,population) %>%
rename(region = region, value = actives)
w_latest_covid.actives_ratio <- final.w_latest_covid %>%
select(region, actives,population) %>%
mutate(active_ratio = actives/population) %>%
rename(region = region, value = active_ratio)
grid.arrange(country_choropleth(w_latest_covid.actives, title  = "Number of active case in world"),country_choropleth(w_latest_covid.actives_ratio, title  = "Ratio of active by population in word"))
GDP.ranking10 = head(GDP.ranking,10)
confirm.change = wtime_covid_final %>%
filter(!is.na(population))%>%
mutate(confirmed.rate = (confirmed/population)*100) %>%
filter(region %in% GDP.ranking10$region)
confirm.change$region <- factor(confirm.change$region, levels = unique(confirm.change$region[order(match(confirm.change$region,GDP.ranking10$region))]))
#confirmed line graph by top10 countries ~ time
a= wtime_covid_final %>%
filter(region %in% GDP.ranking10$region)
confirm.change1 =ggplot(confirm.change,aes(x=Date, y=confirmed, color=region)) + geom_line() + labs("Top 10 countries' confirmed case")
confirm.change2 =ggplot(confirm.change,aes(x=Date, y=confirmed.rate, color=region)) + geom_line()+labs("Top 10 countries' confirm rate by testing case")
ggarrange(confirm.change1, confirm.change2, nrow=1, ncol=2,labels = c("confirmed case","confirmed rate"),common.legend = TRUE,legend="bottom")
test.time = Wtime_testing %>%
filter(region %in% GDP.ranking10$region) %>%
filter (cumulative_test>0)
test.time$region <- factor(test.time$region, levels = unique(test.time$region[order(match(test.time$region,GDP.ranking10$region))]))
kable(test.time %>%
group_by(region)%>%
summarise(first_testing = min(Date)),"markdown")
ggplot(test.time,aes(x=Date, y=cumulative_test, color=region)) + geom_line() + labs("Top 10 countries' test case")
w.test_ratio = final.w_latest_covid %>%
filter (!is.na(cumulative_test) & !is.na(population)) %>%
mutate ( test.ratio = (cumulative_test/population) *100) %>%
arrange( desc(test.ratio))
w.test_ratio$region <- factor(w.test_ratio$region, levels = w.test_ratio$region[order(w.test_ratio$test.ratio, decreasing = TRUE)])
#among the countries that share their cumulative test number
joined =left_join(w.test_ratio, GDP.ranking, by="region")
top10.test_ratio=  joined%>%
filter(region %in% GDP.ranking$region) %>%
arrange(rank)%>%
head(10)
top10.test_ratio$region <- factor(top10.test_ratio$region, levels = top10.test_ratio$region[order(match(top10.test_ratio$region,GDP.ranking10$region))])
ggplot(data = top10.test_ratio, aes(x = region, y=test.ratio))+ theme(axis.text.x = element_text(angle=90, hjust = 1)) +  geom_bar(stat="identity") + labs("Cumulative test number / population rate in top country")
#since some country doesn't share the cumulative test number, it won't contain all 30 countries.
#active line graph by top30 countries ~ time
a2= wtime_covid_final %>%
group_by(region)%>%
filter(region %in% GDP.ranking10$region)
active.change1 =ggplot(a2,aes(x=Date, y=actives, color=region)) + geom_line()
#active/population line graph by top30 countries ~ time
b2= wtime_covid_final %>%
filter(!is.na(population))%>%
mutate(actives.rate = (actives/population)*100) %>%
group_by(region)%>%
filter(region %in% GDP.ranking10$region)
active.change2 =ggplot(b2,aes(x=Date, y=actives.rate, color=region)) + geom_line()
ggarrange(active.change1, active.change2, nrow=1, ncol=2,labels = c("Active case","Active rate"),common.legend = TRUE,legend="bottom")
#top 15 countries by cumulative test number
top.test = final.w_latest_covid %>%
arrange(desc(confirmed))
top15.test = head(top.test$region,15)
have_testing = top.test %>%
filter (region %in% top15.test) %>%
mutate (
total = actives+recovered+deaths,
active.ratio = (actives / total )* 100,
recover.ratio = (recovered / total )* 100,
death.ratio = (deaths / total )* 100) %>%
arrange(desc(confirmed))
top15_test=have_testing %>% gather(c("active.ratio", "recover.ratio", "death.ratio", ), key="type", value="number") %>%
arrange(desc(confirmed)) %>%
select(-c("Date","confirmed","cumulative_test","population","total","actives","recovered","deaths"))
ggplot( data = top15_test, aes(x = region, y=number, fill = type, label = formatC(number,digits = 1, format = "f"))) +
geom_bar(stat = "identity") +  coord_flip() + xlab("Country") +ylab("Ratio (%)") + ggtitle("Top 10 confirmed countries' ratio of case within testing number") + scale_fill_discrete( name = "Case type", labels = c("Active", "Death","Recover")) + scale_x_discrete(limits = rev((top15.test))) +geom_text(size = 2.5, position = position_stack(vjust = 0.5))
#national "https://www.cdc.gov/nchs/nvss/vsrr/covid_weekly/index.htm"
N_death_race.raw = read_csv("https://data.cdc.gov/api/views/pj7m-y5uh/rows.csv?accessType=DOWNLOAD&bom=true&format=true")
N_death_race =  N_death_race.raw %>%
filter(State == "United States"& Indicator != "Unweighted distribution of population (%)") %>%
select(-c("State","Footnote"))
names(N_death_race)[3] <- "White"
names(N_death_race)[4] <- "Black or African American"
names(N_death_race)[5] <- "American Indian or Alaska Native"
names(N_death_race)[6] <- "Asian"
paste("Update date:" , unique(N_death_race$`Data as of`))
kable(N_death_race[,c(2:8)] ,"markdown")
N_death_race=N_death_race %>% gather(c("White", "Black or African American", "American Indian or Alaska Native","Asian", "Hispanic or Latino", "Other"), key="race", value="rate")
ggplot(N_death_race, aes(x = Indicator, y = rate, fill = race, label = rate)) +
geom_bar(stat = "identity") +
geom_text(size = 2.5, position = position_stack(vjust = 0.5))+  coord_flip()+ ylab("Ratio (%)")+ theme(legend.position="bottom",axis.text.x=element_blank(),axis.ticks.x=element_blank(),legend.text=element_text(size=8)) + ggtitle("Distribution of US death cases by race")+guides(fill=guide_legend(nrow=3,byrow=TRUE))
